{"name":"WebCopy","tagline":"WebCopy makes copying to the clipboard easy. Pure JavaScript, no dependencies, no need for Flash.","body":"# WebCopy\r\nWebCopy makes copying to the clipboard easy. Pure JavaScript, no dependencies, no need for Flash.\r\n\r\n## Usage\r\nWebCopy adds a constructor (called WebCopy) to the global scope. The constructor takes two arguments: *elementToCopy* (required) and *settings* (optional). Given a valid *elementToCopy*, WebCopy returns an HTML button element, complete with stateful content and event listeners.\r\n\r\n#### Valid arguments\r\n#####*elementToCopy*\r\nMust be an HTML `<input>` or `<textarea>`, or an element with a `contentEditable` attribute set to `true`. In addition, the element must exist within the document body, and must be visible (eg, it must not have `display: none` set in its styles).\r\nYou can use a CSS selector instead of the actual element. If you're using JQuery, you can use a JQuery object instead (but note that only the first matching element will be used).\r\n\r\n#####*settings*\r\nA settings object. All values are optional.\r\n- `focusData` True or false (defaults to false). Set this to true if you want WebCopy to highlight the data that has been copied, after the user clicks the copy button. By default the copied text won't be highlighted - the button will remain focussed insted.\r\n- `buttonContent` An object that can have up to three properties: `ready`, `done` and `error`. Each of these must be strings and will be used for the content inside the button in each of its three states. The defaults are \"Copy\", \"Copied\" and \"Failed\", but you can supply your own text or HTML values.\r\n- `buttonClasses` An object that can have up to three properties: `ready`, `done` and `error`. Each of these must be strings and will be used as CSS classes on the button in each of its three states. Classes should be separated with spaces.\r\n\r\n### Basic usage\r\nTo generate a new copy button, call WebCopy and pass in a valid HTML element as the elementToCopy:\r\n\r\n```js\r\nvar elementToCopy = document.querySelector(\"#example\");        // Get the element to copy (eg an input)\r\nvar container = elementToCopy1.parentNode;                     // Get the element's container (so we know where to put the button)\r\nvar copyButton = new WebCopy(elementToCopy);                   // Call WebCopy to generate a copy button\r\ncontainer.insertBefore(copyButton, elementToCopy.nextSibling); // Insert the copy button directly after the element\r\n```\r\n\r\n### Using settings\r\nTo use settings, pass in an object as the second argument. THis example uses all available settings.\r\n\r\n```js\r\nvar copyButton = new WebCopy(\"#example\", {                 // Get the element to copy (we're using a selector this time instead of passing in an element)\r\n  focusData: true,                                         // After the button is clicked, the copied text will be highlighted\r\n  buttonContent: {\r\n    ready: \"<span class='icon-clipboard'> Copy me</span>\", // Will be parsed as HTML and inserted into the button\r\n    done: \"<span class='icon-check'> I'm copied!</span>\"   // Will be parsed as HTML and inserted into the button after it has been clicked\r\n  },\r\n  buttonClasses: {\r\n    ready: \"button pink bold square\",                      // These classes will be added to the button in its unclicked state        \r\n    done: \"button green italic square\",                    // These classes will be added to the button after it is clicked, if the copy was successful\r\n    error: \"button square\"                                 // These classes will be added to the button after it is clicked, if the copy was *not* successful\r\n  }\r\n});\r\nvar elementToCopy = document.querySelector(\"#example\");    // Get the element to copy\r\nvar container = elementToCopy2.parentNode;                 // Get the element's container\r\ncontainer.insertBefore(copyButton2, elementToCopy2);       // Insert the copy button directly before the element\r\n```\r\n\r\n### JQuery usage\r\nWebCopy isn't a JQuery plugin and doesn't create any JQuery code, but it understands JQuery objects.\r\n\r\n```js\r\nvar $elementToCopy = $(\"#example\");                // Get the element to copy\r\nvar $copyButton = new $(WebCopy($elementToCopy, {  // Call WebCopy, passing in the element to copy\r\n  buttonClasses: {                                 // Supply any settings you like\r\n    ready: \"button\",\r\n    done: \"button button-success\",\r\n    error: \"button button-error\"\r\n  }\r\n}));\r\n$elementToCopy.after($copyButton);                 // Insert the button into your page\r\n```\r\n\r\n## Supported browsers\r\n- Chrome 42+\r\n- Firefox 41+\r\n- Opera 29+\r\n- IE 9+\r\n- Edge\r\n\r\nNot currently supported in Safari (including Chrome for iOS) or Opera Mini. The code will still 'work' in these unsupported browsers (ie, it won't cause your scripts to crash) but an invisible span will be returned instead of a copy button. This means you don't need to adapt your code to account for unsupported browsers.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}